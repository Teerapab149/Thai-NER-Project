import requests
from bs4 import BeautifulSoup
from pythainlp import word_tokenize
import json
from pathlib import Path
import time

# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
out_dir = Path("thai_ner_project/data")
out_dir.mkdir(parents=True, exist_ok=True)
out_file = out_dir / "news.jsonl"

# RSS feed ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ)
RSS_FEEDS = [
    "https://www.thairath.co.th/rss/news"
]

def fetch_rss_links(feed_url):
    """‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å RSS (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)"""
    try:
        r = requests.get(feed_url, timeout=10, headers={"User-Agent": "Mozilla/5.0"})
        r.raise_for_status()
        soup = BeautifulSoup(r.content, "xml")

        links = []
        for item in soup.find_all("item"):
            link_tag = item.find("link")
            if link_tag:
                # ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á text ‡∏Å‡∏±‡∏ö .string ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
                link = link_tag.text.strip() if link_tag.text else link_tag.string.strip()
                links.append(link)

        # fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ <item>
        if not links:
            for link_tag in soup.find_all("link"):
                href = link_tag.text.strip() if link_tag.text else ""
                if href.startswith("http"):
                    links.append(href)

        return list(set(links))  # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
    except Exception as e:
        print(f"[error] ‡∏î‡∏∂‡∏á RSS ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å {feed_url} -> {e}")
        return []

def fetch_article_text(url):
    """‡∏î‡∏∂‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß (<h1>) + ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß (<p>)"""
    try:
        r = requests.get(url, timeout=10, headers={"User-Agent": "Mozilla/5.0"})
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")

        # üîπ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß
        title_tag = soup.find("h1")
        title = title_tag.get_text(strip=True) if title_tag else ""

        # üîπ ‡∏£‡∏ß‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏Å <p>
        paragraphs = soup.find_all("p")
        content = "\n".join(p.get_text(strip=True) for p in paragraphs)

        # üîπ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ + ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤)
        full_text = (title + "\n" + content).strip()

        # üîπ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        if len(content) < 50:
            print(f"[skip] ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ {url}")
            return None

        return full_text

    except Exception as e:
        print(f"[skip] {url} ‚Üí {e}")
        return None

    finally:
        print(f"[done] ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à: {url}")

def main():
    all_news = []
    for feed in RSS_FEEDS:
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å: {feed}")
        links = fetch_rss_links(feed)
        print(f"  ‡πÄ‡∏à‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå {len(links)} ‡∏Ç‡πà‡∏≤‡∏ß")

        for url in links[:5]:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡∏∞ 5 ‡∏ä‡∏¥‡πâ‡∏ô (‡∏•‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô)
            text = fetch_article_text(url)
            if not text:
                continue

            # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥
            tokens = word_tokenize(text, engine="newmm")

            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSONL (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Label Studio)
            record = {
                "data": {"text": text, "tokens": tokens},
                "meta": {"url": url}
            }
            all_news.append(record)
            print(f"  ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å {url}")
            time.sleep(1)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏ô block

    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    with open(out_file, "w", encoding="utf-8") as f:
        for news in all_news:
            f.write(json.dumps(news, ensure_ascii=False) + "\n")

    print(f"\n‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_news)} ‡∏ä‡∏¥‡πâ‡∏ô -> {out_file}")

if __name__ == "__main__":
    main()
